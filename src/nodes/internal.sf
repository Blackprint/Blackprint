## scss-global
sf-space[blackprint] .nodes {
	bpic-bp-env-get, bpic-bp-env-set,
	bpic-bp-var-get, bpic-bp-var-set,
	bpic-bp-fnvar-input, bpic-bp-fnvar-output {
		.content {
			.center{
				text-align: center;
				background: #00f3ff4d;
				display: inline-block;
				padding: 4px 12px;
				border-radius: 5px;
				font-size: 15px;

				.description {
					font-size: 12px;
					color: darkgray;
				}
			}

			.ports{
				margin-top: 10px;
			}

			.ports > div.name {
				display: none;
			}
		}
	}
	bpic-bp-fnvar-input, bpic-bp-fnvar-output {
		.content .center{
			background: #7935a5cc;
		}
	}
	bpic-bp-env-get, bpic-bp-var-get, bpic-bp-fnvar-input {
		.content .center {
			margin-left: -25px;
			margin-right: -15px;
		}
	}
	bpic-bp-env-set, bpic-bp-var-set, bpic-bp-fnvar-output {
		.content .center {
			margin-left: -15px;
			margin-right: -25px;
		}
	}
}

## js-global
let BPVar = {html: `<div class="node {{ type }}" style="transform:translate({{ x }}px,{{ y }}px)">
	<sf-template path="Blackprint/nodes/template/routes.sf"></sf-template>

	<div class="content">
		<div class="left-port">
			<sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>
		</div>

		<div class="center"
			@contextmenu.stopAll.prevent="nodeMenu(event)"
			@dragmove="moveNode(event)"
			@pointerdown="swapZIndex(event)"
			@pointerup="useType(true)"
			@pointerover="nodeHovered(event)"
			@pointerout="nodeUnhovered(event)"
		>{{ data.name }} <div class="description">{{ data._scopeName.slice(0, 1).toUpperCase() + data._scopeName.slice(1) }} Variable</div></div>

		<div class="right-port">
			<sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
		</div>
	</div>
	<sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>`};

let BPEnv = {html: `<div class="node {{ type }}" style="transform:translate({{ x }}px,{{ y }}px)">
	<sf-template path="Blackprint/nodes/template/routes.sf"></sf-template>

	<div class="content">
		<div class="left-port">
			<sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>
		</div>

		<div class="center"
			@contextmenu.stopAll.prevent="nodeMenu(event)"
			@dragmove="moveNode(event)"
			@pointerdown="swapZIndex(event)"
			@pointerover="nodeHovered(event)"
			@pointerout="nodeUnhovered(event)"
		>{{ data.name }} <div class="description">Environment</div></div>

		<div class="right-port">
			<sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
		</div>
	</div>
	<sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>`};

let BPFnVar = {html: `<div class="node {{ type }}" style="transform:translate({{ x }}px,{{ y }}px)">
	<sf-template path="Blackprint/nodes/template/routes.sf"></sf-template>

	<div class="content">
		<div class="left-port">
			<sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>
		</div>

		<div class="center"
			@contextmenu.stopAll.prevent="nodeMenu(event)"
			@dragmove="moveNode(event)"
			@pointerdown="swapZIndex(event)"
			@pointerover="nodeHovered(event)"
			@pointerout="nodeUnhovered(event)"
		>{{ data.name }} <div class="description">Function {{ type === 'bp-fnvar-input' ? 'Input' : 'Output' }}</div></div>

		<div class="right-port">
			<sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
		</div>
	</div>
	<sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>`};

let BPFn = {html: `<div class="node {{ type }}" style="transform:translate({{ x }}px,{{ y }}px)">
	<sf-template path="Blackprint/nodes/template/routes.sf"></sf-template>

	<div class="content">
		<div class="header"
			@dblclick="openFunction(event)"
			@contextmenu.stopAll.prevent="nodeMenu(event)"
			@dragmove="moveNode(event)"
			@click="swapZIndex(event)"
			@pointerover="nodeHovered(event)"
			@pointerout="nodeUnhovered(event)"
		>
			<div class="title"><div class="icon"></div><div class="text">{{ title }}</div></div>
			<div class="description">{{ description }}</div>
			<div class="extra">
				<div class="item" sf-each="x in $decoration.marks" title="{{ x.title || '' }}">
					<i class="{{ x.icon }}"></i>
				</div>
			</div>
		</div>

		<div class="left-port">
			<sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>
		</div>

		<div class="right-port">
			<sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
		</div>
	</div>
	<sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>`};

let BPFnInOut = {html: `<div class="node func-in-out {{ type }}" style="transform:translate({{ x }}px,{{ y }}px)">
	<sf-template path="Blackprint/nodes/template/routes.sf"></sf-template>

	<div class="content">
		<div class="header"
			@contextmenu.stopAll.prevent="nodeMenu(event)"
			@dragmove="moveNode(event)"
			@pointerdown="swapZIndex(event)"
			@pointerup="addPort(true)"
			@pointerover="nodeHovered(event)"
			@pointerout="nodeUnhovered(event)"
		>
			<div class="title"><div class="icon"></div><div class="text">{{ title }}</div></div>
		</div>

		<div class="left-port">
			<sf-template path="Blackprint/nodes/template/input-port.sf"></sf-template>
		</div>

		<div class="right-port">
			<sf-template path="Blackprint/nodes/template/output-port.sf"></sf-template>
		</div>
	</div>
	<sf-template path="Blackprint/nodes/template/other.sf"></sf-template>
</div>`};

$(function(){
	Blackprint.Sketch.registerInterface('BPIC/BP/Var/Get', BPVar, Blackprint._iface['BPIC/BP/Var/Get']);
	Blackprint.Sketch.registerInterface('BPIC/BP/Var/Set', BPVar, Blackprint._iface['BPIC/BP/Var/Set']);
	Blackprint.Sketch.registerInterface('BPIC/BP/Env/Get', BPEnv, Blackprint._iface['BPIC/BP/Env/Get']);
	Blackprint.Sketch.registerInterface('BPIC/BP/Env/Set', BPEnv, Blackprint._iface['BPIC/BP/Env/Set']);
	Blackprint.Sketch.registerInterface('BPIC/BP/FnVar/Input', BPFnVar, Blackprint._iface['BPIC/BP/FnVar/Input']);
	Blackprint.Sketch.registerInterface('BPIC/BP/FnVar/Output', BPFnVar, Blackprint._iface['BPIC/BP/FnVar/Output']);
	Blackprint.Sketch.registerInterface('BPIC/BP/Fn/Input', BPFnInOut, Blackprint._iface['BPIC/BP/Fn/Input']);
	Blackprint.Sketch.registerInterface('BPIC/BP/Fn/Output', BPFnInOut, Blackprint._iface['BPIC/BP/Fn/Output']);

	Blackprint.Sketch.registerInterface('BPIC/BP/Fn/Main', BPFn,
	class extends Blackprint._iface['BPIC/BP/Fn/Main'] {
		init(){
			// This is required for Blackprint Sketch, when the node is created at runtime
			if(!this._importOnce) this._BpFnInit();
		}
		openFunction(event){
			let instance = this.bpInstance;
			this.node.instance.emit("node.function.open", {
				event, iface: this, function: this.node._funcInstance
			});

			if(instance.pendingRender){
				setTimeout(function(){
					$.afterRepaint().then(() => {
						setTimeout(async function(){
							await instance.recalculatePosition();

							let list = instance.ifaceList;
							let nodes = instance.scope('nodes');
							for	(let i=0; i < list.length; i++) {
								let iface = list[i];
								iface.initInputPort();

								nodes._sO.observe(iface.$el('.node')[0]);
							}
						}, 10);
					});
				}, 10);
			}
		}
	});
});