## comment, This will be used for sf-each for above element
## html
<drop-down class="bp-dropdown-menu {{ hidden }}" style="
    display: {{visible ? 'block' : 'none'}};
    transform: translate({{ x | 0 }}px, {{ y | 0 }}px);
  ">
  <div class="first" style="display: {{ !title && 'none' }}">{{ title || '' }}</div>
  <input>
  <ul>
    <li sf-each="x in options" :class="{{ x.divider ? 'divider' : '' }} {{ x.disabled ? 'disabled' : '' }} {{ x.description ? 'has-desc' : '' }}" title="{{ x.info || '' }}">
      {{@if x.title != null:
      	{[ <a> ]} // Begin

      	// Icon on the left
      	if(x.icon != null){
      		if(x.icon.includes('//'))
      			{[ <img class="dropdown-icon" :src="{{x.icon}}"> ]};
      		else
      			{[ <i class="dropdown-icon {{x.icon}}"></i> ]};
      	}

      	// Always use { [ enclosed template ]} to avoid vulnerability
      	// like the text being parsed as HTML
      	{[ <div class="title">{{ x.title }}</div> ]} // Content

		if(x.description != null)
      		{[ <div class="description">{{ x.description }}</div> ]};

      	// Add icon if the has deep menu
      	if(x.deep != null)
      		{[ <i class="{{ root.icon.more }} has-deep"></i> ]};

      	{[ </a> ]} // End
      }}
    </li>
  </ul>
</drop-down>

## scss-global
sf-space[blackprint]{
	.bp-dropdown-menu {
		z-index: 10000;
		opacity: 0.9;

		margin-top: 7px;
		background-color: rgba(255, 255, 255, 0.96);
		box-shadow: 1px 1px 11px 3px black;
		border: inherit;
		position: fixed;
		top: 0;
		left: 0;
		padding: 0;
		border-radius: 3px;
		background: white;

		// transition: 0.3s ease-out;
		// transition-property: visibility, opacity;
		&.hidden{
			visibility: hidden;
			opacity: 0;
		}
		input{
			display: none;
			outline: none;
			border: none;
			border-bottom: 1px solid black;
			width: calc(100% - 4px);
			font-family: 'Nunito', sans-serif, "Font Awesome 5 Free";
			&::placeholder {
				text-align: center;
			}
		}
		ul{
			overflow-x: hidden;
			overflow-y: auto;
			max-height: 300px;
		}

		li {
			position: relative;
			vertical-align: baseline;
			display: inherit !important;
			padding: 8px 16px 8px 8px;
			min-width: 110px;
			border-bottom: 1px dashed darkgray;
			font-size: 16px;
			max-width: 400px;
			cursor: pointer;
			color: black;

			&.has-desc {
				padding: 2px 16px 2px 8px;

				a{
					display: block;
				}
				.title{
					font-size: 14px;
				}
			}

			.description {
				font-size: 12px;
				color: gray;
				overflow: hidden;
				text-overflow: ellipsis;
				white-space: nowrap;
			}

			> * {
				pointer-events: none;
			}

			&:hover{
				background: lightgray;
			}

			li > a > span {
				padding-right: 6px;
			}
		}
	}

	ul li .has-deep{
		top: 11px;
		position: absolute;
		right: 5px;
	}

	sf-m[name="dropdown"].has-search > drop-down > input{
		display: block;
	}

	drop-down.bp-dropdown-menu drop-down{
		opacity: 1;
	}

	drop-down{
		&> .first {
			display: block;
			padding: 5px 10px;
			text-align: center;
			font-weight: bold;
			font-size: 16px;
			text-transform: capitalize;
			letter-spacing: 1px;
			color: white;
			background: #ba2f63;
			box-shadow: 0 0 5px #d12867;
		}
		ul{
			margin: 0;
			padding: 0;

			li a {
				display: flex;
				div{
					padding-left: 5px;
				}
			}

			.dropdown-icon {
				padding-right: 5px;
				float: left;
				align-self: center;
			}

			li.disabled, li.disabled:hover{
				cursor: default !important;
				background: #888;
			}
		}
	}
}

## js-global
// =====================================================================
// ============== Model <sf-m name="dropdown"></sf-m> ==================
// =====================================================================
Blackprint.space.model('dropdown', function(My){
	My.menus = [];
	My.onCancel = void 0;
	My.className = '';
	My.hasSearch = false;
	My.searchActive = false;
	My.pendingDeepOpen = false;
	My.pendingDeepOpen_ = 0;

	My.icon = {
		more: 'fa fa-chevron-right'
	};

	// menus: [{title, callback}, {title, deep:[{...}]}, ...]
	My.show = function(menus, { x, y, event, element, title, className, hasSearch, searchObject }){
		My._event = event;

		// Remove last dropdown if haven't been closed
		if(My.menus.length !== 0)
			My.menus.splice(0);
		else
			addBackdrop();

		menus.title = title;

		if(element !== void 0){
			let rect = element.getBoundingClientRect();
			menus.x = rect.x + 5;
			menus.y = rect.y + rect.height;
		}
		else if(x !== void 0){
			menus.x = x;
			menus.y = y;
		}
		else{
			menus.x = event.x;
			menus.y = event.y;
		}

		menus.event = event;
		for (var i = menus.length - 1; i >= 0; i--) {
			if(menus[i].hide)
				menus.splice(i, 1);
		}

		My.className = className || '';
		My.menus.push(menus);

		if(hasSearch){
			let el = My.$el('input').eq(0);
			let debounce = 0;
			let ref = My.menus[0];
			let menuCopy = My.menus[0].slice(0);
			el.attr('placeholder', 'ï€‚ Type here to search...');
			My.hasSearch = true;

			function onClick(ev){
				let item = ev.target.model;
				item.callback.apply(item.context, item.args);

				My.$el('drop-down > ul').off('click', onClick);
				My.hide();
			}

			el.on('keyup', function(ev){
				clearTimeout(debounce);
				debounce = setTimeout(()=> {
					let value = el[0].value;
					if(!value || !My.hasSearch){
						My.searchActive = false;
						el[0].value = '';

						ref.splice(0);
						ref.push(...menuCopy);

						My.$el('drop-down > ul').off('click', onClick);
						return;
					}

					My.searchActive = true;
					let checks = value.split(' ').map(v => {
						let temp = RegExp(v, 'i');
						temp.found = false;
						return temp;
					});

					let results = [];
					function deepFindFilter(list, docs, lastPath=''){
						for(let i=0; i < list.length; i++){
							let item = list[i];
							let getDocs = docs?.[item.title];
							let fullPath = lastPath + item.title+' > ';

							if(item.deep != null){
								deepFindFilter(item.deep, getDocs, fullPath);
							}
							else {
								let allFound = true;
								for(var k=0; k < checks.length; k++){
									let ref = checks[k];
									if(ref.test(fullPath)) ref.found = true;
									else allFound = false;
								}

								let description;
								if(getDocs != null){
									;({ description } = getDocs);

									if(allFound === false){
										for(let k=0; k < checks.length; k++){
											let ref = checks[k];
											if(ref.test(description)) ref.found = true;
										}
									}
								}

								// Check and reset flag
								allFound = true;
								for(let k=0; k < checks.length; k++){
									let ref = checks[k];
									if(ref.found === false) allFound = false;
									ref.found = false;
								}

								if(allFound === false) continue;

								results.push(Object.assign({ description, info: description }, item, {title: fullPath.slice(0, -3)}));
							}
						}
					}

					deepFindFilter(menuCopy, searchObject);

					for (var i = 0; i < My.menus.length; i++)
						My.menus.getElement(i).model.deepRemove();

					ref.splice(0);
					ref.push(...results);

					My.$el('drop-down > ul').on('click', onClick);
				}, 300);
			});

			setTimeout(()=> el.focus(), 200);
		}

		return My;
	}

	My.hide = function(){
		for (var i = 0; i < My.menus.length; i++)
			My.menus.getElement(i).model.deepRemove();

		My.pendingDeepOpen = false;
		My.pendingDeepOpen_ = 0;
		My.menus.splice(0);
		removeBackdrop();

		My.className = '';
		My.hasSearch = false;

		My.$el('input').off('keyup');
	}

	var backdropCreated = false;
	function backdropListener(ev){
		if($(ev.target).parent('sf-m')[0] === sf.Window.source(My.$el, My._event))
			return;

		removeBackdrop();

		My.hide();
		My.onCancel && My.onCancel();
	}

	var backdrop = $('<div class="ground-backdrop"></div>');
	function addBackdrop(){
		if(backdropCreated) return;

		backdrop.insertBefore(sf.Window.source(My.$el, My._event));
		setTimeout(function(){
			backdrop.addClass('show');
			$(sf.Window).on('pointerdown', backdropListener);
			$(sf.Window).once('contextmenu', ev => ev.preventDefault());
			backdropCreated = true;
		}, 10);
	}

	function removeBackdrop(){
		backdropCreated = false;
		backdrop.removeClass('show');

		setTimeout(()=> {
			backdrop.remove();
		}, 200);

		$(sf.Window).off('pointerdown', backdropListener);
	}
});

// =====================================================================
// ============== Component <drop-down></drop-down> ====================
// =====================================================================
Blackprint.space.component('drop-down', {template: #this.path}, function(My, include, $item){
	My.visible = false;
	My.hidden = 'hidden'; // We also need to hide it before repaint

	My.options = $item;
	My._parent = $item._parent;
	My.x = $item.x;
	My.y = $item.y;
	My.root = include('dropdown');
	My.width = 0;
	My.height = 0;
	My.disabled = $item.disabled === true;

	for (var i = $item.length - 1; i >= 0; i--) {
		if($item[i].hide)
			$item.splice(i, 1);
	}

	// First dropdown title
	My.title = $item.title;

	var currentDeepLevel, $el;
	My.init = function(){
		if($item.event !== void 0){
			var el = sf.Window.source(My.$el, $item.event);
			if(el === null) return;
			$el = $(el);
		}
		else $el = My.$el;

		My.visible = true;

		// Check position when the element rendered
		var ulElem = sf.Window.source(My.$el, $item.event).querySelector('ul');
		$.afterRepaint().then(function(){
			let x = 0, y = 0;
			let parent = My._parent;
			let w = parent !== void 0 ? parent.width : 0;

			while(parent !== void 0){
				x += parent.x;
				y += parent.y;
				parent = parent._parent;
			}

			My.width = ulElem.offsetWidth;
			My.height = ulElem.offsetHeight;

			if(x + My.x + My.width > sf.Window.focus.innerWidth)
				My.x -= My.width + w;

			if(y + My.y + My.height > sf.Window.focus.innerHeight)
				My.y -= My.height;

			My.hidden = '';
		});

		// Find nested options and add event listener on mouse hover
		var options = My.options;
		for (var i = 0; i < options.length; i++) {
			let opt = options[i];
			const elem = $(options.getElements(i));

			if(opt.deep !== void 0){
				function openDeep(ev){
					if(currentDeepLevel !== void 0)
						My.deepRemove();

					if(opt.hover !== void 0)
						opt.hover.apply(opt.context, opt.args);

					var deep = opt.deep;
					deep.event = ev;
					deep._parent = My;

					// Use the cache instead
					if(deep.el !== void 0){
						currentDeepLevel = deep.el;
						deep.el.model.y = deep.yi - (deep.ul?.scrollTop || 0);
						$el.append(deep.el);
						return;
					}

					deep.ul = My.$el.children('ul')[0];

					// Initialize position once
					deep.x = ulElem.offsetWidth;
					deep.yi = ev.target.offsetTop - 7;
					deep.y = deep.yi - (deep.ul?.scrollTop || 0);

					// Create dropdown in current sf-space
					deep.el = currentDeepLevel = new $DropDown(deep, My.$space);
					currentDeepLevel.sf$noGC = true; // Avoid framework's GC
					$el.append(currentDeepLevel);
				}

				elem.on('mouseover', function(ev){
					My.root.pendingDeepOpen = ev.target;
					clearTimeout(My.root.pendingDeepOpen_);

					My.root.pendingDeepOpen_ = setTimeout(()=> {
						if(My.root.pendingDeepOpen === ev.target)
							openDeep(ev);
					}, 200);
				});

				elem.on('click', openDeep);
				continue;
			}

			elem.on('mouseover', function(ev){
				My.root.pendingDeepOpen = ev.target;
				clearTimeout(My.root.pendingDeepOpen_);

				My.root.pendingDeepOpen_ = setTimeout(()=> {
					if(currentDeepLevel !== void 0){
						My.deepRemove();
						currentDeepLevel = void 0;
					}

					opt.hover && opt.hover.apply(opt.context, opt.args);
				}, 200);
			});

			if(opt.callback){
				elem.on('click', function(ev){
					if(opt.unhover !== void 0)
						opt.unhover.apply(opt.context, opt.args);

					opt.callback.apply(opt.context, opt.args);
					My.root.hide();
				});
			}

			if(opt.unhover){
				elem.on('mouseout', function(ev){
					opt.unhover.apply(opt.context, opt.args);
				});
			}
		}
	}

	My.deepRemove = function(){
		if(currentDeepLevel === void 0)
			return;

		currentDeepLevel.remove();
		currentDeepLevel.model.deepRemove();
	}
});