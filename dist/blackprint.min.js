/* Blackprint 
 MIT Licensed */
class Blackprint{
	constructor(){
		this.index = Blackprint.index++;
		this.scope = Blackprint.space.getScope(this.index);
	}

	cloneContainer(){
		return Blackprint.space.getHTML(Blackprint.index);
	}

	registerNode(namespace, func){
		_.set(Blackprint.nodes, namespace.split('/'), func);
	}

	createNode(namespace, options){
		var func = _.get(Blackprint.nodes, namespace.split('/'));
		if(func === void 0)
			return console.error('Node for', namespace, "was not found") && void 0;

		var self = {};
		func(self);

		// Prepare to be pushed as node
		var node = {
			title:self.title,
			description:self.description || ''
		};

		// Type extract for port data type
		function extract(which){
			var link = node[which] = [];
			var local = self[which];
			if(local === void 0)
				return;

			var temp = Object.keys(local);
			for (let i = 0; i < temp.length; i++) {
				var prepare = {
					get:function(){
						if(link[i].value === void 0){
							if(link[i].root === void 0)
								return link[i].default;

							// Run from root node and stop when reach this node
							link[i].root(link[i]);
						}

						return link[i].value;
					}
				};

				// Can only obtain data when accessing input port
				if(which !== 'inputs'){
					prepare.set = function(val){
						link[i].value = val;
						return link[i].value || link[i].default;
					}
				}

				var type, def;
				if(typeof local[temp[i]] === 'function'){
					type = local[temp[i]];

					if(type === Number)
						def = 0;
					else if(type === Boolean)
						def = false;
					else if(type === String)
						def = '';
					else if(type === Array)
						def = [];
					else if(type === Object)
						def = {};
					else if(type.constructor === Function)
						def = void 0;
					else return console.error(type, "was unrecognized as an port data type");
				}
				else type = local[temp[i]].constructor;

				// Set for the linked node
				link.push({name:temp[i], type:type, default:def, cables:[]});

				// Set on the local scope
				Object.defineProperty(local, temp[i], prepare);
			}
		}

		var portType = ['inputs', 'outputs', 'properties'];
		for (var i = 0; i < portType.length; i++)
			extract(portType[i]);

		// Get model scope
		var nodes = this.scope('nodes');

		// This may not return the component, but only the raw object
		node = nodes.list[nodes.list.push(node)-1];
		if(options !== void 0)
			Object.assign(node, options);
	}
}

Blackprint.nodes = {};
Blackprint.index = 0;

// Start private scope for Blackprint Module
;(function(){

// Let's define `Space` that handle model and component as global variable on our private scope
var Space = Blackprint.space = sf.space('blackprint', {
	templatePath:'Blackprint/page.html'
});
Space.model('cables', function(self){
	/*{
		head1:[x,y], -- Number
		head2:[x,y], -- Number
		type:'String',
		curve:self.curve[..],
		valid:true,

		nodeA:Object,
		nodeB:Object,
	}*/
	self.list = [];

	// Fixing viewport position
	self.space = [0,0];
	self.init = function(){
		setTimeout(function(){
			// Get sf-space element
			var rect = self.$el[0].parentNode.getBoundingClientRect();
			self.space = [rect.x, rect.y];
		}, 500);
	}

	// Flag if cursor was hovering a node port
	self.hoverPort = false; // {elem:, item:}

	self.recalculatePath = function(item){
		var x1 = item.head1[0], y1 = item.head1[1];
		var x2 = item.head2[0], y2 = item.head2[1];

		if(item.pos !== 'property'){
			var cx = (x2-x1)/2;
			if(cx > -50 && cx < 0)
				cx = -50;
			else if(cx < 50 && cx >= 0)
				cx = 50;

			if(item.pos === 'input'){
				if(x2 < x1)
				  item.linePath = `${x1 + cx} ${y1} ${x2 - cx} ${y2}`;
				else
				  item.linePath = `${x1 - cx} ${y1} ${x2 + cx} ${y2}`;
			}
			else if(item.pos === 'output'){
				if(x2 < x1)
				  item.linePath = `${x1 - cx} ${y1} ${x2 + cx} ${y2}`;
				else
				  item.linePath = `${x1 + cx} ${y1} ${x2 - cx} ${y2}`;
			}
		}
		else{
			var cy = (y2-y1)/2;
			if(cy > -50 && cy < 0)
				cy = -50;
			else if(cy < 50 && cy >= 0)
				cy = 50;

			if(y2 < y1)
			  item.linePath = `${x1} ${y1 - cy} ${x2} ${y2 - cy}`;
			else
			  item.linePath = `${x1} ${y1 + cy} ${x2} ${y2 + cy}`;
		}
	}

	// Determine which cable head is clicked
	self.currentCable = void 0;
	self.cableHeadClicked = function(item, event){
		var whichHead = event;
		if(event.constructor !== Number)
			whichHead = event.target.previousElementSibling.tagName === 'circle' ? 2 : 1;

		function moveCableHead(event){
			var xy;

			// Let's make a magnet sensation (fixed position when hovering node port)
			if(self.hoverPort !== false){
				var center = self.hoverPort.rect.width/2;
				xy = [self.hoverPort.rect.x+center, self.hoverPort.rect.y+center];
			}

			// Follow pointer
			else xy = [event.clientX, event.clientY];

			if(whichHead === 1)
				item.head1 = xy;
			else
				item.head2 = xy;
		}

		var elem = self.list.getElement(item);

		// Let the pointer pass thru the current svg group
		if(elem !== void 0){
			elem = $(elem);
			elem.css('pointer-events', 'none');
		}

		self.currentCable = item;
		$('vw-sketch').on('pointermove', moveCableHead).once('pointerup', function(event){
			$('vw-sketch').off('pointermove', moveCableHead);

			// Add delay because it may be used for connecting port
			setTimeout(function(){
				self.currentCable = void 0;
			}, 100);

			if(elem !== void 0)
				elem.css('pointer-events', '');
		});
	}

	self.createCable = function(obj, owner){
		return self.list[self.list.push({
			head1:[obj.x, obj.y],
			head2:[obj.x, obj.y],
			type:obj.type,
			pos:obj.position,
			valid:true,
			linePath:'0 0 0 0',
			connection:[],
			owner:owner
		}) - 1];
	}
});
Space.model('nodes', function(self){
	self.list = [];
});

Space.component('a-node', function(self, root, item){
	// For setting position
	self.x = 50;
	self.y = 50;

	// Assign item value to the component
	// Including `inputs, outputs, properties`
	Object.assign(self, item);

	// DragMove event handler
	self.moveNode = function(e){
		self.x += e.movementX;
		self.y += e.movementY;

		moveCables(e, self.inputs);
		moveCables(e, self.outputs);
		moveCables(e, self.properties);
	}

	function moveCables(e, which){
		// Move the connected cables
		for (var i = 0; i < which.length; i++) {
			var cables = which[i].cables;
			if(cables.length === 0)
				continue;

			for (var a = 0; a < cables.length; a++) {
				var cable;
				if(cables[a].owner === self)
					cable = cables[a].head1;
				else
					cable = cables[a].head2;

				cable[0] += e.movementX;
				cable[1] += e.movementY;
			}
		}
	}

	// PointerDown event handler
	self.createCable = function(e, item){
		// Determine port position
		var pos = 'input';
		if(self.outputs.indexOf(item) !== -1)
			pos = 'output';
		else if(self.properties.indexOf(item) !== -1)
			pos = 'property';

		// Get size and position of the port
		var rect = event.target.getBoundingClientRect();
		var center = rect.width/2;

		// Create cable and save the reference
		var cable = root('cables').createCable({
			x:rect.x + center,
			y:rect.y + center,
			type:item.type.name,
			position:pos
		}, self);

		// Connect this cable into port's cable list
		item.cables.push(cable);

		// Put port reference to the cable
		cable.connection.push(item);

		// Default head index is "2" when creating new cable 
		root('cables').cableHeadClicked(cable, 2);
	}

	// PointerUp event handler
	self.cableConnect = function(item){
		var cable = root('cables').currentCable;

		// Connect this cable into port's cable list
		item.cables.push(cable);

		// Put port reference to the cable
		cable.connection.push(item);
		console.log('A cable was connected', item);
	}

	// PointerOver event handler
	self.portHovered = function(event, item){
		root('cables').hoverPort = {
			elem:event.target,
			rect:event.target.getBoundingClientRect(),
			item:item
		};
	}

	// PointerOut event handler
	self.portUnhovered = function(){
		root('cables').hoverPort = false;
	}
});
})();
//# sourceMappingURL=blackprint.min.1583479039182.js.map
