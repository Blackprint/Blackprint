/* Blackprint 
 MIT Licensed */

if(window.templates === void 0)window.templates = Object.create(null)
window.templates['Blackprint/page.html'] = '<sf-space blackprint>\n  <sf-m name="container"\n    @mousewheel.prevent="scaleContainer(event)"\n    style="\n      width: {{ size.w }}px;\n      height: {{ size.h }}px;\n      transform: translate({{ pos.x }}px, {{ pos.y }}px)\n                 scale({{ scale }})"\n  >\n    <!-- Put the cables behind the nodes -->\n    <sf-m name="cables" class="cables" id="test">\n\n      <!-- Put empty space event here, because this element filling the empty space -->\n      <!-- recalculatePath: ./container/cables.js -->\n      <!-- list: ./container/nodes.js -->\n      <svg style="transform: translate(-{{space[0]}}, -{{space[1]}}px)"\n        @contextmenu.stop="container.nodeScope.menu(event)"\n        @pointerdown="container.moveContainer(event)"\n      >\n        <g sf-repeat-this="x in list" class="{{ x.type }} {{ x.valid ? \'\' : \'invalid\' }}" @contextmenu.stop.capture="x.cableMenu(event)">\n          <path\n              d="M {{ recalculatePath(x) || x.head1[0] + \' \' + x.head1[1] }}\n                 C {{ x.linePath }},\n                   {{ recalculatePath(x) || x.head2[0] + \' \' + x.head2[1] }}"\n          ></path>\n          <circle\n              @pointerdown.capture.stop="x.cableHeadClicked(event)"\n              transform="translate({{x.head2[0]}}, {{x.head2[1]}})"\n          ></circle>\n        </g>\n      </svg>\n    </sf-m>\n\n    <!-- Nodes goes here -->\n    <sf-m name="nodes" class="nodes" style="user-select:none;">\n      <!-- Handled on ./nodes.js -->\n      <div sf-repeat-this="item in list">\n        {{@exec\n          var type;\n\n          // Capitalize each word\n          if(item.type.includes(\'-\')){\n            type = item.type.split(\'-\');\n\n            for (var i = 0; i < type.length; i++)\n              type[i] = type[i][0].toUpperCase() + type[i].slice(1);\n\n            type = type.join(\'\');\n          }\n          else\n            type = item.type[0].toUpperCase() + item.type.slice(1);\n\n          var node = window["$"+type+\'Node\'];\n\n          if(node === void 0){\n            throw new Error("Node element with type "+type+" was not found");\n            @return null;\n          }\n\n          // Create from Blackprint\'s namespace and (true = let the item become the scope)\n          @return new node(item, Blackprint.space, true);\n        }}\n      </div>\n    </sf-m>\n  </sf-m>\n\n  <svg height="1" width="1" style="position:absolute"><defs>\n    <linearGradient id="bp-pathline" spreadMethod="reflect">\n      <stop offset="0%" stop-color="#000"></stop><stop offset="20%" stop-color="#fff"></stop>\n      <stop offset="40%" stop-color="#000"></stop><stop offset="60%" stop-color="#fff"></stop>\n\n      <animate attributeName="x1" dur="6s" from="0%" to="370%" repeatCount="indefinite"></animate>\n      <animate attributeName="x2" dur="6s" from="30%" to="400%" repeatCount="indefinite"></animate>\n    </linearGradient>\n\n    <linearGradient id="bp-pathline-reverse" spreadMethod="reflect">\n      <stop offset="0%" stop-color="#000"></stop><stop offset="20%" stop-color="#fff"></stop>\n      <stop offset="40%" stop-color="#000"></stop><stop offset="60%" stop-color="#fff"></stop>\n\n      <animate attributeName="x1" dur="6s" from="370%" to="0%" repeatCount="indefinite"></animate>\n      <animate attributeName="x2" dur="6s" from="400%" to="30%" repeatCount="indefinite"></animate>\n    </linearGradient>\n  </defs></svg>\n\n  <sf-m name="dropdown">\n    <drop-down sf-repeat-this="val in menus"></drop-down>\n  </sf-m>\n</sf-space>'
window.templates['Blackprint/container/drop-down.html'] = '<ul class="bp-dropdown-menu" style="\n  display: {{visible ? \'block\' : \'none\'}};\n  transform: translate({{ x }}px, {{ y }}px);\n">\n  <li sf-repeat-this="x in options" :class="{{!x.title ? \'divider\' : \'\'}}">\n    {{@if x.title:\n      {[ <a>{{x.title}}</a> ]}\n    }}\n  </li>\n</ul>'
window.templates['Blackprint/nodes/default.html'] = '<default-node class="node general" style="transform: translate({{ x }}px, {{ y }}px)">\n  <sf-template path="./template/header.html"></sf-template>\n\n  <div class="content">\n    <div class="left-port">\n      <sf-template path="./template/input-port.html"></sf-template>\n    </div>\n\n    <div class="right-port">\n      <sf-template path="./template/output-port.html"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path="./template/property-port.html"></sf-template>\n</default-node>'
window.templates['Blackprint/nodes/template/header-small.html'] = '<div class="header small" @contextmenu.stopAll.prevent="nodeMenu(event)" @dragmove="moveNode(event)">\n  <div class="icon"></div>\n</div>'
window.templates['Blackprint/nodes/template/header.html'] = '<div class="header" @contextmenu.stopAll.prevent="nodeMenu(event)" @dragmove="moveNode(event)">\n  <div class="title"><div class="icon"></div><div class="text">{{ title }}</div></div>\n  <div class="description">{{ description }}</div>\n</div>'
window.templates['Blackprint/nodes/template/input-port.html'] = '<div class="input">\n  <div class="ports {{ val.type.name }}" sf-repeat-this="key, val in inputs">\n    <div class="port"\n    	@contextmenu.stop="val.portRightClick(event)"\n        @pointerdown.left.stop="val.createCable(event)"\n        @pointerup.left="val.connectCable()"\n        @pointerover="val.portHovered(event)"\n        @pointerout="val.portUnhovered(event)"\n    ></div>\n    <div class="name">{{ key }}</div>\n  </div>\n</div>'
window.templates['Blackprint/nodes/template/output-port.html'] = '<div class="output">\n  <div class="ports {{ val.type.name }}" sf-repeat-this="key, val in outputs">\n    <div class="name">{{ key }}</div>\n    <div class="port"\n        @contextmenu.stop="val.portRightClick(event)"\n        @pointerdown.left.stop="val.createCable(event)"\n        @pointerup.left="val.connectCable()"\n        @pointerover="val.portHovered(event)"\n        @pointerout="val.portUnhovered(event)"\n    ></div>\n  </div>\n</div>'
window.templates['Blackprint/nodes/template/property-port.html'] = '<div class="property">\n  <div class="ports {{ val.type.name }}" sf-repeat-this="key, val in properties">\n    <div class="name">{{ key }}</div>\n    <div class="port"\n        @contextmenu.stop="val.portRightClick(event)"\n        @pointerdown.left.stop="val.createCable(event)"\n        @pointerup.left="val.connectCable()"\n        @pointerover="val.portHovered(event)"\n        @pointerout="val.portUnhovered(event)"\n    ></div>\n  </div>\n</div>'